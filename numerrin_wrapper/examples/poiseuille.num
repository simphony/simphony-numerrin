pts={0.0,0.0;30.0,0.0;30.0,5.0;0.0,5.0}
Quadmesh(pts,{30,5},{0,2,0,2},{1.0,-1.0,1.0,-1.0},mesh,domains)

omega->domains[0]
wall=Union(domains[1],domains[3])
inflow->domains[4]
outflow->domains[2]

V=Space(omega,"Lagrange",2)
W=Space(omega,"Lagrange",1)

mu=Viscosity
rho=Density

u[0:1] in V
p in W

q[0:1]->u
q[2]->p
res:=q

For it=1:10
  A=Derivative(res,q)
  A=0.0
  res=0.0

  Integral(omega,"Gauss",5)
    phiv=BasisFunction(V(.))
    gphiv=BasisGradient(V(.))
    phiw=BasisFunction(W(.))

    gup=Grad(u(.))
    tau=mu*(gup+gup')
    res[0] <- tau[0,:] dot gphiv + rho*(u(.) dot gup[0,:])*phiv - p(.) * gphiv[0,:]
    res[1] <- tau[1,:] dot gphiv + rho*(u(.) dot gup[1,:])*phiv - p(.) * gphiv[1,:]
    res[2] <- (gup[0,0]+gup[1,1])*phiw
  EndIntegral

  Constraint(inflow,V)
    x=Position
    up=u(.)
    res[0] <- up[0]+0.1*x[1]*(x[1]-5)
    res[1] <- up[1]
  EndConstraint

  Constraint(wall,V)
    up=u(.)
    res[0] <- up[0]
    res[1] <- up[1]
  EndConstraint

  /*Constraint(inflow,W)
    res[2] <- p(.)-1.0
  EndConstraint

  Constraint(outflow,W)
    res[2] <- p(.)
  EndConstraint*/

  ? it, ": ", Norm(res)
  If Norm(res) < 1.0e-6
    Exit
  EndIf
  q -= LU(A,res)
EndFor

lo=0
up=Size(mesh)[1]-1
Un[0,0:up-lo]=u[0][[lo:up]]
Un[1,0:up-lo]=u[1][[lo:up]]
lo=up+1 up += Size(mesh)[2]
Ue[0,0:up-lo]=u[0][[lo:up]]
Ue[1,0:up-lo]=u[1][[lo:up]]
lo=up+1 up += Size(mesh)[3]
Uf[0,0:up-lo]=u[0][[lo:up]]
Uf[1,0:up-lo]=u[1][[lo:up]]

% WriteCGNS("tulos.cgns") mesh, u, p
